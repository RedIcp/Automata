grammar MyGrammar;

prog: statement*;

function_declaration
: type ID '(' (parameter_declaration (',' parameter_declaration))? ')' ';'
| type ID '(' (parameter_declaration (',' parameter_declaration))? ')' block
;

parameter_declaration
: type ID
;

block
: '{' (statement)* '}'
;

statement
: function_call ';'
| return_statement ';'
| assignment ';'
| if_statement
| while_statement
| block
;

function_call
: ID '(' (expression (',' expression)*)? ')'
;

return_statement
: 'return' expression
;

assignment
: ID '=' expression
;

if_statement
: 'if' '(' expression ')' statement ('else' statement)?
;

while_statement
: 'while' '(' expression ')' statement
;

expression
: ID # idExpr
| INT # intExpr
| FLOAT # floatExpr
| BOOL # boolExpr
| STRING # stringExpr
| function_call # functionCallExpr
| op=('!' | '-') expression # unaryExpr
| expression op=('+' | '-' | '*' | '/' | '%' | '^') expression # binaryExpr
| expression op=('==' | '!=' | '>' | '<' | '>=' | '<=') expression # comparisonExpr
| expression '&&' expression # andExpr
| expression '||' expression # orExpr
| '(' expression ')' # parenExpr
;

type
: 'int' | 'float' | 'bool' | 'string' | 'void'
;

ID: [a-zA-Z]+;
INT: 'int';
STRING: 'string';
FLOAT: 'float';
BOOL: 'bool';
WS: [ \t\r\n]+ -> skip ;