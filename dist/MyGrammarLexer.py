# Generated from MyGrammar.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,210,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,3,12,129,8,12,1,13,4,13,132,8,13,11,13,12,13,
        133,1,14,4,14,137,8,14,11,14,12,14,138,1,15,4,15,142,8,15,11,15,
        12,15,143,1,15,1,15,4,15,148,8,15,11,15,12,15,149,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,3,16,161,8,16,1,17,1,17,5,17,165,8,
        17,10,17,12,17,168,9,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
        1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,
        1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,
        1,31,4,31,205,8,31,11,31,12,31,206,1,31,1,31,1,166,0,32,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
        26,53,27,55,28,57,29,59,30,61,31,63,32,1,0,3,2,0,65,90,97,122,1,
        0,48,57,3,0,9,10,13,13,32,32,220,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,
        0,3,67,1,0,0,0,5,69,1,0,0,0,7,71,1,0,0,0,9,73,1,0,0,0,11,75,1,0,
        0,0,13,77,1,0,0,0,15,83,1,0,0,0,17,90,1,0,0,0,19,92,1,0,0,0,21,95,
        1,0,0,0,23,100,1,0,0,0,25,128,1,0,0,0,27,131,1,0,0,0,29,136,1,0,
        0,0,31,141,1,0,0,0,33,160,1,0,0,0,35,162,1,0,0,0,37,171,1,0,0,0,
        39,173,1,0,0,0,41,175,1,0,0,0,43,177,1,0,0,0,45,179,1,0,0,0,47,181,
        1,0,0,0,49,184,1,0,0,0,51,187,1,0,0,0,53,189,1,0,0,0,55,191,1,0,
        0,0,57,194,1,0,0,0,59,197,1,0,0,0,61,200,1,0,0,0,63,204,1,0,0,0,
        65,66,5,40,0,0,66,2,1,0,0,0,67,68,5,44,0,0,68,4,1,0,0,0,69,70,5,
        41,0,0,70,6,1,0,0,0,71,72,5,123,0,0,72,8,1,0,0,0,73,74,5,125,0,0,
        74,10,1,0,0,0,75,76,5,59,0,0,76,12,1,0,0,0,77,78,5,112,0,0,78,79,
        5,114,0,0,79,80,5,105,0,0,80,81,5,110,0,0,81,82,5,116,0,0,82,14,
        1,0,0,0,83,84,5,114,0,0,84,85,5,101,0,0,85,86,5,116,0,0,86,87,5,
        117,0,0,87,88,5,114,0,0,88,89,5,110,0,0,89,16,1,0,0,0,90,91,5,61,
        0,0,91,18,1,0,0,0,92,93,5,105,0,0,93,94,5,102,0,0,94,20,1,0,0,0,
        95,96,5,101,0,0,96,97,5,108,0,0,97,98,5,115,0,0,98,99,5,101,0,0,
        99,22,1,0,0,0,100,101,5,119,0,0,101,102,5,104,0,0,102,103,5,105,
        0,0,103,104,5,108,0,0,104,105,5,101,0,0,105,24,1,0,0,0,106,107,5,
        105,0,0,107,108,5,110,0,0,108,129,5,116,0,0,109,110,5,102,0,0,110,
        111,5,108,0,0,111,112,5,111,0,0,112,113,5,97,0,0,113,129,5,116,0,
        0,114,115,5,98,0,0,115,116,5,111,0,0,116,117,5,111,0,0,117,129,5,
        108,0,0,118,119,5,115,0,0,119,120,5,116,0,0,120,121,5,114,0,0,121,
        122,5,105,0,0,122,123,5,110,0,0,123,129,5,103,0,0,124,125,5,118,
        0,0,125,126,5,111,0,0,126,127,5,105,0,0,127,129,5,100,0,0,128,106,
        1,0,0,0,128,109,1,0,0,0,128,114,1,0,0,0,128,118,1,0,0,0,128,124,
        1,0,0,0,129,26,1,0,0,0,130,132,7,0,0,0,131,130,1,0,0,0,132,133,1,
        0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,28,1,0,0,0,135,137,7,1,
        0,0,136,135,1,0,0,0,137,138,1,0,0,0,138,136,1,0,0,0,138,139,1,0,
        0,0,139,30,1,0,0,0,140,142,7,1,0,0,141,140,1,0,0,0,142,143,1,0,0,
        0,143,141,1,0,0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,147,5,46,0,
        0,146,148,7,1,0,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,
        0,149,150,1,0,0,0,150,32,1,0,0,0,151,152,5,116,0,0,152,153,5,114,
        0,0,153,154,5,117,0,0,154,161,5,101,0,0,155,156,5,102,0,0,156,157,
        5,97,0,0,157,158,5,108,0,0,158,159,5,115,0,0,159,161,5,101,0,0,160,
        151,1,0,0,0,160,155,1,0,0,0,161,34,1,0,0,0,162,166,5,34,0,0,163,
        165,9,0,0,0,164,163,1,0,0,0,165,168,1,0,0,0,166,167,1,0,0,0,166,
        164,1,0,0,0,167,169,1,0,0,0,168,166,1,0,0,0,169,170,5,34,0,0,170,
        36,1,0,0,0,171,172,5,43,0,0,172,38,1,0,0,0,173,174,5,45,0,0,174,
        40,1,0,0,0,175,176,5,42,0,0,176,42,1,0,0,0,177,178,5,47,0,0,178,
        44,1,0,0,0,179,180,5,37,0,0,180,46,1,0,0,0,181,182,5,61,0,0,182,
        183,5,61,0,0,183,48,1,0,0,0,184,185,5,33,0,0,185,186,5,61,0,0,186,
        50,1,0,0,0,187,188,5,62,0,0,188,52,1,0,0,0,189,190,5,60,0,0,190,
        54,1,0,0,0,191,192,5,62,0,0,192,193,5,61,0,0,193,56,1,0,0,0,194,
        195,5,60,0,0,195,196,5,61,0,0,196,58,1,0,0,0,197,198,5,38,0,0,198,
        199,5,38,0,0,199,60,1,0,0,0,200,201,5,124,0,0,201,202,5,124,0,0,
        202,62,1,0,0,0,203,205,7,2,0,0,204,203,1,0,0,0,205,206,1,0,0,0,206,
        204,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,6,31,0,0,209,
        64,1,0,0,0,9,0,128,133,138,143,149,160,166,206,1,6,0,0
    ]

class MyGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    TYPE = 13
    ID = 14
    INT = 15
    FLOAT = 16
    BOOL = 17
    STRING = 18
    PLUS = 19
    MINUS = 20
    MULTIPLY = 21
    DIVIDE = 22
    MODULO = 23
    EQUALS = 24
    NOT_EQUALS = 25
    GREATER_THAN = 26
    LESS_THAN = 27
    GREATER_THAN_EQUALS = 28
    LESS_THAN_EQUALS = 29
    AND = 30
    OR = 31
    WS = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "','", "')'", "'{'", "'}'", "';'", "'print'", "'return'", 
            "'='", "'if'", "'else'", "'while'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'&&'", 
            "'||'" ]

    symbolicNames = [ "<INVALID>",
            "TYPE", "ID", "INT", "FLOAT", "BOOL", "STRING", "PLUS", "MINUS", 
            "MULTIPLY", "DIVIDE", "MODULO", "EQUALS", "NOT_EQUALS", "GREATER_THAN", 
            "LESS_THAN", "GREATER_THAN_EQUALS", "LESS_THAN_EQUALS", "AND", 
            "OR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "TYPE", "ID", 
                  "INT", "FLOAT", "BOOL", "STRING", "PLUS", "MINUS", "MULTIPLY", 
                  "DIVIDE", "MODULO", "EQUALS", "NOT_EQUALS", "GREATER_THAN", 
                  "LESS_THAN", "GREATER_THAN_EQUALS", "LESS_THAN_EQUALS", 
                  "AND", "OR", "WS" ]

    grammarFileName = "MyGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


